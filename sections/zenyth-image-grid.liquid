{{ 'zenyth-image-grid.css' | asset_url | stylesheet_tag }}
{{ 'zenyth-dialog.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}

{%- liquid
  assign columns_mobile_int = section.settings.columns_mobile | plus: 0
  assign show_mobile_slider = true
  assign show_desktop_slider = section.settings.enable_carousel
  assign columns_desktop = section.settings.columns_desktop
  assign screen_size_visibility = section.settings.screen_size_visibility
-%}

<style>
  .zenyth-image-grid .slider-component {
    --number-of-columns: {{ columns_desktop }};
  }
  
  /* Screen size visibility classes */
  .zenyth-image-grid.znt--desktop {
    display: none;
  }
  
  .zenyth-image-grid.znt--mobile {
    display: none;
  }
  
  @media screen and (min-width: 750px) {
    .zenyth-image-grid.znt--desktop {
      display: block;
    }
    
    .zenyth-image-grid.znt--mobile {
      display: none;
    }
    
    .zenyth-image-grid .grid__item.slider__slide {
      width: calc(100% / var(--number-of-columns));
      max-width: calc(100% / var(--number-of-columns));
      flex: 0 0 calc(100% / var(--number-of-columns));
    }
    
    .zenyth-image-grid .slider {
      width: 100%;
      overflow-x: auto;
      scroll-snap-type: x mandatory;
    }
    
    .zenyth-image-grid .slider::-webkit-scrollbar {
      height: 0;
      width: 0;
    }
  }
  
  @media screen and (max-width: 749px) {
    .zenyth-image-grid.znt--desktop {
      display: none;
    }
    
    .zenyth-image-grid.znt--mobile {
      display: block;
    }
    
    .zenyth-image-grid .grid__item.slider__slide {
      width: calc(100% / {{ columns_mobile_int }});
      max-width: calc(100% / {{ columns_mobile_int }});
      flex: 0 0 calc(100% / {{ columns_mobile_int }});
    }
  }

  .znt-dialog_container .slider-button {
    background-color: {{ section.settings.button_background_color | default: '#53389e' }};
    color: {{ section.settings.button_svg_color | default: '#ffffff' }};
    border: 1px solid {{ section.settings.button_border_color | default: '#53389e' }};
  }


</style>

<div class="zenyth-image-grid section-{{ section.id }}-padding{% if screen_size_visibility == 'desktop' %} znt--desktop{% elsif screen_size_visibility == 'mobile' %} znt--mobile{% endif %} gradient color-{{ section.settings.section_color_scheme }}"
  role="region">
  <div class="page-width">
    {%- if section.settings.heading != blank -%}
      <h2 id="ImageGridHeading-{{ section.id }}" class="zenyth-image-grid__heading text-{{ section.settings.heading_alignment }}" style="text-align: {{ section.settings.heading_alignment }} !important;">{{ section.settings.heading }}</h2>
    {%- endif -%}

    {% if show_desktop_slider %}
      <slider-component class="slider-mobile-gutter{% if show_desktop_slider %} slider-component-desktop{% endif %}" style="--number-of-columns: {{ columns_desktop }};"
        aria-labelledby="ImageGridHeading-{{ section.id }}"
        aria-roledescription="carousel">
        <div class="slider-buttons no-js-hidden" style="
            --znt-slider-button-background-color: {{ section.settings.button_background_color | default: '#53389e' }};
            --znt-slider-button-svg-color: {{ section.settings.button_svg_color | default: '#ffffff' }};
            --znt-slider-button-border-color: {{ section.settings.button_border_color | default: '#53389e' }};
        ">
          <button
            type="button"
            class="slider-button slider-button--prev"
            name="previous"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
            aria-controls="Slider-{{ section.id }}"
          >
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </button>
          <button
            type="button"
            class="slider-button slider-button--next"
            name="next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
            aria-controls="Slider-{{ section.id }}"
          >
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </button>
        </div>
        
        <div class="slider-container overflow-hidden">
          <ul
            id="Slider-{{ section.id }}"
            class="grid slider slider--desktop{% if show_mobile_slider %} slider--tablet{% endif %}"
            role="list"
          >
            {%- for block in section.blocks -%}
              <li
                id="Slide-{{ section.id }}-{{ forloop.index }}"
                class="grid__item slider__slide"
                {{ block.shopify_attributes }}
                {% if show_desktop_slider %}aria-roledescription="slide"{% endif %}
              >
                <div class="znt-image-grid__column">
                  {%- if block.settings.image != blank -%}
                    <div class="znt-image-grid__image-wrapper">
                      {%- if section.settings.enable_dialog -%}
                        <button 
                          class="znt-dialog_trigger button{% if block.settings.button_style_secondary %} button--secondary{% else %} button--primary{% endif %}" 
                          aria-haspopup="dialog" 
                          data-section="{{ section.id }}"
                          data-slide-index="{{ forloop.index0 }}"
                          {{ block.shopify_attributes }}
                        >
                          {{ block.settings.image | image_url: width: 1000 | image_tag:
                            loading: "lazy",
                            class: "znt-image-grid__image",
                            widths: "375, 550, 750, 1000"
                          }}
                        </button>
                      {%- else -%}
                        {{ block.settings.image | image_url: width: 1000 | image_tag:
                          loading: "lazy",
                          class: "znt-image-grid__image",
                          widths: "375, 550, 750, 1000"
                        }}
                      {%- endif -%}
                    </div>
                  {%- else -%}
                    <div class="znt-image-grid__placeholder">
                      {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
                    </div>
                  {%- endif -%}
                </div>
              </li>
            {%- endfor -%}
          </ul>
        </div>
      </slider-component>
    {% else %}
      <div class="znt-image-grid znt-image-grid--{{ columns_desktop }}-columns">
        {%- for block in section.blocks -%}
          <div class="znt-image-grid__column" {{ block.shopify_attributes }}>
            {%- if block.settings.image != blank -%}
              <div class="znt-image-grid__image-wrapper">
                {%- assign img_url = block.settings.image | image_url: width: 1000 -%}
                {%- assign sizes = "(min-width: 750px) calc(100vw / " | append: columns_desktop | append: "), 100vw" -%}
                
                {%- if section.settings.enable_dialog -%}
                  <button 
                    class="znt-dialog_trigger button{% if block.settings.button_style_secondary %} button--secondary{% else %} button--primary{% endif %}" 
                    aria-haspopup="dialog" 
                    data-section="{{ section.id }}"
                    data-slide-index="{{ forloop.index0 }}"
                    {{ block.shopify_attributes }}
                  >
                    {{ block.settings.image | image_url: width: 1000 | image_tag:
                      loading: "lazy",
                      class: "znt-image-grid__image",
                      sizes: sizes,
                      widths: "375, 550, 750, 1000"
                    }}
                  </button>
                {%- else -%}
                  {{ block.settings.image | image_url: width: 1000 | image_tag:
                    loading: "lazy",
                    class: "znt-image-grid__image",
                    sizes: sizes,
                    widths: "375, 550, 750, 1000"
                  }}
                {%- endif -%}
              </div>
            {%- else -%}
              <div class="znt-image-grid__placeholder">
                {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
              </div>
            {%- endif -%}
          </div>
        {%- endfor -%}
      </div>
    {% endif %}

    {% if section.settings.enable_dialog %}
      <div class="znt-dialog_backdrop" data-section="{{ section.id }}"></div>
      <div class="znt-dialog_container" role="dialog" aria-modal="true" data-section="{{ section.id }}">
        <div class="znt-dialog-live-region" aria-live="assertive" aria-atomic="true" style="position: absolute; width: 1px; height: 1px; overflow: hidden; clip: rect(1px, 1px, 1px, 1px);"></div>
        <div class="znt-dialog-carousel-container">
          <slider-component class="slider-mobile-gutter slider-component-desktop">
            <div class="slider-buttons no-js-hidden" style="
                --znt-slider-button-background-color: {{ section.settings.button_background_color | default: '#53389e' }};
                --znt-slider-button-svg-color: {{ section.settings.button_svg_color | default: '#ffffff' }};
                --znt-slider-button-border-color: {{ section.settings.button_border_color | default: '#53389e' }};
            ">
              <button
                type="button"
                class="slider-button slider-button--prev"
                name="previous"
                aria-label="{{ 'general.slider.previous_slide' | t }}"
                aria-controls="DialogSlider-{{ section.id }}"
              >
                <span class="svg-wrapper">
                  {{- 'icon-caret.svg' | inline_asset_content -}}
                </span>
              </button>
              <button
                type="button"
                class="slider-button slider-button--next"
                name="next"
                aria-label="{{ 'general.slider.next_slide' | t }}"
                aria-controls="DialogSlider-{{ section.id }}"
              >
                <span class="svg-wrapper">
                  {{- 'icon-caret.svg' | inline_asset_content -}}
                </span>
              </button>
            </div>
            
            <div class="slider-container overflow-hidden" style="height: 100%;">
              <ul
                id="DialogSlider-{{ section.id }}"
                class="grid slider slider--desktop slider--tablet single-item-slider"
                role="list"
                style="height: 100%;"
              >
                {%- for block in section.blocks -%}
                  {% if block.settings.image != blank %}
                    <li
                      id="DialogSlide-{{ section.id }}-{{ forloop.index }}"
                      class="grid__item slider__slide znt-dialog-slide"
                      {{ block.shopify_attributes }}
                      data-slide-index="{{ forloop.index0 }}"
                    >
                      {{ block.settings.image | image_url: width: 2000 | image_tag:
                        loading: "lazy",
                        class: "znt-dialog__image",
                        sizes: "100vw",
                        widths: "1000, 1500, 2000"
                      }}
                    </li>
                  {% endif %}
                {%- endfor -%}
              </ul>
            </div>
          </slider-component>
          <button class="znt-dialog_close">
            {{- 'icon-close.svg' | inline_asset_content -}}
            <span class="visually-hidden">Close Dialog</span>
          </button>
        </div>
      </div>
    {% endif %}
  </div>
</div>

<script src="{{ 'zenyth-dialog.js' | asset_url }}" defer></script>

<script>
  {%- unless request.design_mode -%}
  /**
   * Zenyth Image Grid - Maintains aspect ratio for image wrappers
   */
  document.addEventListener('DOMContentLoaded', function() {
    function mergeIdenticalSections() {
      const sections = document.querySelectorAll('.zenyth-image-grid');
      const sectionMap = new Map();

      sections.forEach(section => {
        const id = section.querySelector('[data-section-id]')?.getAttribute('data-section-id');
        if (!id) return;

        if (!sectionMap.has(id)) {
          sectionMap.set(id, []);
        }
        sectionMap.get(id).push(section);
      });

      sectionMap.forEach((sections, id) => {
        if (sections.length <= 1) return;

        const firstSection = sections[0];
        const firstSlider = firstSection.querySelector('.slider');
        if (!firstSlider) return;

        for (let i = 1; i < sections.length; i++) {
          const currentSection = sections[i];
          const currentSlider = currentSection.querySelector('.slider');
          if (!currentSlider) continue;

          const slides = currentSlider.querySelectorAll('li.slider__slide');
          slides.forEach(slide => {
            firstSlider.appendChild(slide);
          });

          currentSection.remove();
        }

        if (window.zntDialog) {
          const sliderComponent = firstSection.querySelector('slider-component');
          if (sliderComponent) {
            const initialSlideIndex = 0;
            initializeDialogSliderControls(firstSection.querySelector('.znt-dialog_container'), initialSlideIndex);
          }
        }
      });
    }

    mergeIdenticalSections();

    var imageGrid = {
      imageWrappers: document.querySelectorAll('.znt-image-grid__image-wrapper'),
      aspectRatio: '{{ section.settings.aspect_ratio | default: "square" }}',
      
      init: function() {
        // Set initial dimensions
        this.setSquareHeight();

        // Re-adjust on resize
        var self = this;
        window.addEventListener('resize', function() {
          clearTimeout(self.resizeTimer);
          self.resizeTimer = setTimeout(function() {
            self.setSquareHeight();
          }, 250);
        });
      },

      setSquareHeight: function() {
        // Make sure we have wrapper elements
        if (this.imageWrappers.length === 0) {
          this.imageWrappers = document.querySelectorAll('.znt-image-grid__image-wrapper');
          if (this.imageWrappers.length === 0) return;
        }
        
        var self = this;
        for (var i = 0; i < this.imageWrappers.length; i++) {
          var wrapper = this.imageWrappers[i];
          var width = wrapper.offsetWidth;
          
          // Only set height if we have a valid width
          if (width > 0) {
            // Force square aspect ratio
            wrapper.style.height = width + 'px';
          }
        }
      }
    };

    // Initialize
    imageGrid.init();
    
    // Run again after a small delay to ensure elements are fully rendered
    setTimeout(function() {
      imageGrid.setSquareHeight();
    }, 300);
  });

  // Initialize immediately if document is already loaded
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    var imageWrappers = document.querySelectorAll('.znt-image-grid__image-wrapper');
    
    // Apply height to all image wrappers
    if (imageWrappers.length > 0) {
      for (var i = 0; i < imageWrappers.length; i++) {
        var wrapper = imageWrappers[i];
        var width = wrapper.offsetWidth;
        
        // Only set height if we have a valid width
        if (width > 0) {
          // Force square aspect ratio
          wrapper.style.height = width + 'px';
        }
      }
    }
  }

  /**
   * Dialog Carousel - Enhance ZntDialog with carousel functionality
   */
  document.addEventListener('DOMContentLoaded', function() {
    // This code will run after the ZntDialog component is initialized
    if (window.zntDialog) {
      // Store the original openDialog function
      const originalOpenDialog = window.zntDialog.openDialog;
      
      // Override the openDialog function to add carousel functionality
      window.zntDialog.openDialog = function(trigger, dialogData) {
        // Call the original function first
        originalOpenDialog.call(this, trigger, dialogData);
        
        // Get the slide index from the trigger
        const slideIndex = parseInt(trigger.getAttribute('data-slide-index'), 10);
        const container = dialogData.container;
        
        // Initialize slider controls with the correct slide index
        initializeDialogSliderControls(container, slideIndex);
      };
    }
  });

  function initializeDialogSliderControls(container, initialSlideIndex = 0) {
    const sliderComponent = container.querySelector('slider-component');
    if (!sliderComponent) return;
    
    const prevButton = container.querySelector('.slider-button--prev');
    const nextButton = container.querySelector('.slider-button--next');
    const slider = container.querySelector('.slider');
    const liveRegion = container.querySelector('.znt-dialog-live-region');
    const slides = slider.querySelectorAll('.znt-dialog-slide');
    const totalSlides = slides.length;
    
    if (!prevButton || !nextButton || !slider) return;
    
    // Clear any existing listeners to prevent duplicates
    prevButton.replaceWith(prevButton.cloneNode(true));
    nextButton.replaceWith(nextButton.cloneNode(true));
    
    // Get the fresh references
    const newPrevButton = container.querySelector('.slider-button--prev');
    const newNextButton = container.querySelector('.slider-button--next');

    // Function to get current slide index
    function getCurrentSlideIndex() {
      return Math.round(slider.scrollLeft / slider.clientWidth);
    }

    // Function to scroll to a specific slide
    function scrollToSlide(index, behavior = 'smooth') {
      const targetScroll = index * slider.clientWidth;
      slider.scrollTo({
        left: targetScroll,
        behavior: behavior
      });
    }

    // Function to update button states
    function updateButtonStates() {
      const currentIndex = getCurrentSlideIndex();
      const isAtStart = currentIndex === 0;
      const isAtEnd = currentIndex === totalSlides - 1;
      
      // Handle previous button
      if (isAtStart) {
        if (document.activeElement === newPrevButton) {
          newNextButton.focus();
        }
        setTimeout(() => {
          newPrevButton.disabled = true;
          newPrevButton.style.opacity = '0.5';
          newPrevButton.style.cursor = 'not-allowed';
        }, 1000);
      } else {
        newPrevButton.disabled = false;
        newPrevButton.style.opacity = '1';
        newPrevButton.style.cursor = 'pointer';
      }
      
      // Handle next button
      if (isAtEnd) {
        if (document.activeElement === newNextButton) {
          newPrevButton.focus();
        }
        setTimeout(() => {
          newNextButton.disabled = true;
          newNextButton.style.opacity = '0.5';
          newNextButton.style.cursor = 'not-allowed';
        }, 1000);
      } else {
        newNextButton.disabled = false;
        newNextButton.style.opacity = '1';
        newNextButton.style.cursor = 'pointer';
      }

      // Update live region with current slide position
      liveRegion.textContent = `Slide ${currentIndex + 1} of ${totalSlides}`;
      setTimeout(() => {
        liveRegion.textContent = '';
      }, 1000);
    }

    // Initialize the slider position and update button states
    requestAnimationFrame(() => {
      // Use instant behavior for initial positioning
      scrollToSlide(initialSlideIndex, 'instant');
      updateButtonStates();
    });
    
    // Add click event listeners for navigation
    newPrevButton.addEventListener('click', () => {
      if (!newPrevButton.disabled) {
        const currentIndex = getCurrentSlideIndex();
        scrollToSlide(currentIndex - 1);
        setTimeout(() => {
          updateButtonStates();
        }, 500);
      }
    });
    
    newNextButton.addEventListener('click', () => {
      if (!newNextButton.disabled) {
        const currentIndex = getCurrentSlideIndex();
        scrollToSlide(currentIndex + 1);
        setTimeout(() => {
          updateButtonStates();
        }, 500);
      }
    });

    // Add scroll event listener to update button states
    let scrollTimeout;
    slider.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        updateButtonStates();
      }, 50);
    });

    // Add resize observer to handle window resizing
    const resizeObserver = new ResizeObserver(() => {
      requestAnimationFrame(() => {
        const currentIndex = getCurrentSlideIndex();
        scrollToSlide(currentIndex, 'instant');
        updateButtonStates();
      });
    });
    resizeObserver.observe(slider);
  }
  {%- endunless -%}
</script>

{% schema %}
{
  "name": "Zenyth Image Grid",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "section_id",
      "label": "Section ID",
      "info": "Used to identify and merge identical sections"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Image Grid"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "Heading alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "select",
      "id": "screen_size_visibility",
      "label": "Screen Size Visibility",
      "options": [
        {
          "value": "all",
          "label": "All Screen Sizes"
        },
        {
          "value": "desktop",
          "label": "Desktop Only"
        },
        {
          "value": "mobile",
          "label": "Mobile Only"
        }
      ],
      "default": "all",
      "info": "Choose which screen sizes this grid should be visible on"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 8,
      "step": 1,
      "default": 3,
      "label": "Number of columns on desktop"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "options": [
        {
          "value": "1",
          "label": "1 column"
        },
        {
          "value": "2",
          "label": "2 columns"
        }
      ],
      "default": "2",
      "label": "Number of columns on mobile"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "options": [
        {
          "value": "square",
          "label": "Square (1:1)"
        },
        {
          "value": "landscape",
          "label": "Landscape (4:3)"
        }
      ],
      "default": "square",
      "label": "Image aspect ratio"
    },
    {
      "type": "checkbox",
      "id": "enable_dialog",
      "label": "Enable image dialog",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_carousel",
      "label": "Enable carousel",
      "default": false,
      "info": "When enabled, images will display in a single row carousel"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Carousel button background color",
      "default": "#53389e"
    },
    {
      "type": "color",
      "id": "button_border_color",
      "label": "Carousel button border color",
      "default": "#53389e"
    },
    {
      "type": "color",
      "id": "button_svg_color",
      "label": "Carousel button icon color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "t:sections.image-with-text.settings.header_colors.content"
    },        
    {
      "type": "color_scheme",
      "id": "section_color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "checkbox",
          "id": "button_style_secondary",
          "label": "Use secondary button style",
          "default": false
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Zenyth Image Grid",
      "blocks": [
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        }
      ]
    }
  ]
}
{% endschema %}
